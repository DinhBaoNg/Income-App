import SwiftUI

struct HomeView: View {
    @State private var transactions:[Transaction] = [
        Transaction(title: "Apple", type: .expense, amount: 5.00, date: Date()),
        Transaction(title: "Apple", type: .expense, amount: 5.00, date: Date())
    ]
    @State private var showAddTransactionView = false
    @State private var transactionToEdit: Transaction?
    var expenses: String {
        var sumExpense = 0.0
        for transaction in transactions {
            if transaction.type == .expense {
                sumExpense += transaction.amount
            }
        }
        let numberFormatter = NumberFormatter()
        numberFormatter.numberStyle = .currency
        return numberFormatter.string(from: sumExpense as NSNumber) ?? "đ0"
    }
    var income: String {
        var sumIncome = transactions.filter({$0.type == .expense}).reduce(0,{$0 + $1.amount})
//        for transaction in transactions {
//            if transaction.type == .income {
//                sumIncome += transaction.amount
//            }
//        }
        let numberFormatter = NumberFormatter()
        numberFormatter.numberStyle = .currency
        return numberFormatter.string(from: sumIncome as NSNumber) ?? "đ0"
    }
    var total:String {
        var total = 0.0
        for transaction in transactions {
            switch transaction.type {
            case .income:
                total += transaction.amount
            case .expense:
                total -= transaction.amount
            }
        }
        let numberFormatter = NumberFormatter()
        numberFormatter.numberStyle = .currency
        return numberFormatter.string(from: total as NSNumber) ?? "đ0"
    }
    fileprivate func FloatingButton() -> some View {
        VStack{
            Spacer()
            NavigationLink{
                AddTransactionView(transactions: $transactions)
            }label: {
                Text("+")
                    .font(.largeTitle)
                    .frame(width: 70,height: 70)
                    .foregroundStyle(Color.white)
                    .padding(.bottom,7)
                
            }
            .background(Color.primaryLightGreen)
            .clipShape(Circle())
            
        }
    }
    fileprivate func BalanceView() ->some View{
        ZStack{
            RoundedRectangle(cornerRadius: 8)
                .fill(Color.primaryLightGreen)
            VStack(alignment: .leading,spacing: 5){
                HStack{
                    VStack(alignment: .leading){
                        Text("BALANCE")
                            .font(.caption)
                            .foregroundStyle(Color.white)
                        Text("\(total)")
                            .font(.system(size: 42,weight: .light))
                            .foregroundStyle(Color.white)
                    }
                    Spacer()
                }
                .padding(.top)
                HStack{
                    VStack(alignment: .leading){
                        Text("Expense")
                            .font(.system(size: 15,weight: .bold))
                            .foregroundStyle(Color.white)
                        Text("\(expenses)")
                            .font(.system(size: 15,weight: .regular))
                            .foregroundStyle(Color.white)
                    }
                    VStack(alignment:.leading){
                        Text("Income")
                            .font(.system(size: 15,weight: .bold))
                            .foregroundStyle(Color.white)
                        Text("\(income)")
                            .font(.system(size: 15,weight: .regular))
                            .foregroundStyle(Color.white)
                    }
                }
                Spacer()
            }
            .padding(.horizontal)
        }
        .shadow(color:Color.black.opacity(0.3), radius: 10)
        .frame(height: 150)
        .padding(.horizontal)
    }
    var body: some View {
        NavigationStack {
            ZStack {
                VStack{
                    BalanceView()
                    List{
                        ForEach(transactions){
                            transaction in
                            Button(action: {
                                transactionToEdit = transaction
                            }, label: {
                                TransactionView(transaction: transaction)
                                    .foregroundStyle(Color.black)
                            })
                        }
                        .onDelete(perform: delete)
                    }
                    .scrollContentBackground(.hidden)
                }
                FloatingButton()
            }
            .navigationTitle("Income")
            .navigationDestination(item: $transactionToEdit, destination: {
                transactionToEdit in AddTransactionView(transactions : $transactions,transactionToEdit: transactionToEdit)
            })
            .navigationDestination(isPresented: $showAddTransactionView, destination: {
                AddTransactionView(transactions: $transactions)
            })
            .toolbar{
                ToolbarItem(placement: .topBarTrailing){
                    Button(action: {
                        
                    }, label: {
                        Image(systemName: "gearshape.fill")
                            .foregroundStyle(Color.black)
                    })
                }
            }
        }
    }
    private func delete(at offsets: IndexSet)
    {
        transactions.remove(atOffsets: offsets)
    }
}

#Preview {
    HomeView()
}
